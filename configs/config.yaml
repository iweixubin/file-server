# 使用的是 https://github.com/spf13/viper，是搜索文件夹的，只要文件名是 config 就好，
# 默认会读取系统变量 FileServerConfigPath 配置的文件夹，是文件夹
# 默认会搜索当前程序位置的文件夹
# 可以在命令行中 -c 指定配置文件，如 config.yaml ，这里就不是文件夹了~

# https://github.com/valyala/fasthttp 声称比 go http 快10倍，
# 不过本引用的瓶颈应该是在硬盘的 IO 上
# FastHttp；  Http 这个是使用 go 官方的
WebEngin: FastHttp

# 服务的地址以及端口
Host: "127.0.0.1:8080"

# 静态文件所在的目录路径
SrcDir: "F:/Photos"

# http://127.0.0.1:8080/img/name.png_180x180.png
# 支持哪些图片文件格式调整大小>，必须有一个点 .
SupportExtResize:
  - ".jpg"
  - ".jpeg"
  - ".png"
  - ".bmp"
  - ".gif"

# 在 url 上获取尺寸的正则，宽x高
SizeRegexp: "_(\\d{2,3})x(\\d{2,3})."

# 宽高的限制，1是宽，2是高； 3是宽，4是高...依此类推~ 貌似直接写在上面的正则中会更好 --!
# 如果不设置，那么就是按正则的来~
SizeLimit:
  # 京东首页秒杀图
  - 140
  - 140
  # 京东列表页
  - 220
  - 220
  # 京东产品详情页主图
  - 450
  - 450


# 设置缓存模式
# CacheMode: none   每次都重新生成缩略图
# CacheMode: disk   生成的缩略图存在磁盘上(这个也抽象成缓存)
# CacheMode: memory 生成的缩略图存在内存上
# CacheMode: redis  生成的缩略图存在 Redis 上

# 设置同一个浏览器时的 Last-Modified，单位秒
# 如果没有超过，那么则返回 http状态码 304，这样不会重新生成图片，也减少网络传输
# CacheMode 为 disk 时，按静态文件处理方式
# 86400(一天)； 604800(一周)
HttpExpires: 604800

CacheMode: disk

# CacheMode 为 disk 的配置
CacheModeDisk:
  # 生成(缓存)到哪个目录
  Dir: "F:/Resize"
  # 执行清理工作(还没有实现)
  ClearJob:
    # 执行的时间
    Time: "04:44:44"
    # 缓存多久过期，单位秒
    Expires:

# CacheMode 为 memory 的配置
CacheModeMemory:
  # 缓存多久过期，单位秒
  Expires: 60

# CacheMode 为 redis 的配置(还没有实现)
CacheModeRedis:
  # 最好独立一个库，用 url 作为 key 来缓存的
  # 连接字符串，格式查看 https://pkg.go.dev/github.com/go-redis/redis/v8?tab=doc#ParseURL
  Conn: ""
  # 缓存多久过期，单位秒
  Expires:


